package geopriv4j;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import geopriv4j.utils.LatLng;
import geopriv4j.utils.Mapper;
import geopriv4j.utils.VhcFileReader;

public class VHCAlgorithm {
	public static Map<Integer,ArrayList<Mapper>> vhcmap = new HashMap<>();
    public static int LIMIT = 500;
    public static Mapper topleft = new Mapper("topleft",new LatLng(35.3123,-80.7432));
    public static Mapper topright = new Mapper("topright",new LatLng(35.3123,-80.7199));
    public static Mapper bottomright = new Mapper("bottomright",new LatLng(35.2945,-80.7199));
    public static Mapper bottomleft = new Mapper("bottomleft",new LatLng(35.2945,-80.7432));


    public VHCAlgorithm() {
    	
        ArrayList<Mapper> mappers = VhcFileReader.readFile();
        ArrayList<Mapper> coordinates = new ArrayList<>();
        coordinates.add(topleft);
        coordinates.add(topright);
        coordinates.add(bottomright);
        coordinates.add(bottomleft);
        initiateVhc(mappers,coordinates);

    }

    public static int initiateVhc(ArrayList<Mapper> mappers, ArrayList<Mapper> coordinates) {

        Mapper m1 = coordinates.get(0);
        Mapper m2 = coordinates.get(1);
        Mapper m3 = coordinates.get(2);
        Mapper m4 = coordinates.get(3);


        double difflat = Math.abs(m1.loc.latitude - m3.loc.latitude);
        double difflng = Math.abs(m1.loc.longitude - m3.loc.longitude);

        double latmeters = difflat/0.0000089;
        double lngmeters = difflng * Math.cos(m3.loc.latitude * 0.018)/0.0000089;

        int count = 0;

        for(int i=0;i<mappers.size();i++) {
            if(m1.loc.latitude > mappers.get(i).loc.latitude && Math.abs(m1.loc.longitude) > Math.abs(mappers.get(i).loc.longitude) ) {//&&  m4.loc.longitude < m.get(i).loc.longitude  &&  m4.loc.latitude < m.get(i).loc.latitude
                if(m3.loc.latitude < mappers.get(i).loc.latitude && Math.abs(m3.loc.longitude) < Math.abs(mappers.get(i).loc.longitude) ) {//&&  m3.loc.longitude >m.get(i).loc.longitude  &&  m2.loc.latitude > m.get(i).loc.latitude
                    count++;
                }
            }
        }

        if(count > LIMIT ) {// MU * latmeters && count > MU * lngmeters
            double lat = m1.loc.latitude - (Math.abs(m1.loc.latitude) - Math.abs(m3.loc.latitude))/2;
            double lng = m1.loc.longitude + (Math.abs(m1.loc.longitude) - Math.abs(m3.loc.longitude))/2;
            ArrayList <Mapper> newcor1 = new ArrayList<Mapper>();
            Mapper m12new = new Mapper(""+4, new LatLng(m1.loc.latitude,lng));
            Mapper m13new = new Mapper(""+5, new LatLng(lat,lng));
            Mapper m14new = new Mapper(""+6, new LatLng(lat,m1.loc.longitude));
            newcor1.add(m1);
            newcor1.add(m12new);
            newcor1.add(m13new);
            newcor1.add(m14new);
            initiateVhc(mappers,newcor1);

            ArrayList<Mapper> newcor2 = new ArrayList<Mapper>();
            Mapper m21new = new Mapper(""+4, new LatLng(m1.loc.latitude,lng));
            Mapper m23new = new Mapper(""+5, new LatLng(lat,m2.loc.longitude));
            Mapper m24new = new Mapper(""+6, new LatLng(lat,lng));
            newcor2.add(m21new);
            newcor2.add(m2);
            newcor2.add(m23new);
            newcor2.add(m24new);
            initiateVhc(mappers,newcor2);

            ArrayList<Mapper> newcor3 = new ArrayList<Mapper>();
            Mapper m31new = new Mapper(""+4, new LatLng(lat,lng));
            Mapper m32new = new Mapper(""+5, new LatLng(lat,m3.loc.longitude));
            Mapper m34new = new Mapper(""+6, new LatLng(m3.loc.latitude,lng));
            newcor3.add(m31new);
            newcor3.add(m32new);
            newcor3.add(m3);
            newcor3.add(m34new);
            initiateVhc(mappers,newcor3);

            ArrayList<Mapper> newcor4 = new ArrayList<Mapper>();
            Mapper m41new = new Mapper(""+4, new LatLng(lat,m4.loc.longitude));
            Mapper m42new = new Mapper(""+5, new LatLng(lat,lng));
            Mapper m43new = new Mapper(""+6, new LatLng(m4.loc.latitude,lng));
            newcor4.add(m41new);
            newcor4.add(m42new);
            newcor4.add(m43new);
            newcor4.add(m4);
            initiateVhc(mappers,newcor4);

        }
        else {
            vhcmap.put(vhcmap.size(), coordinates);
            return 0;
        }
        return 0;
    }

    public static LatLng vhcalgo(Mapper m , int windowSize) {
        Random random = new Random();
        int result=0;
        int sign = 1;

        if(random.nextGaussian()<0.5){
            sign*=-1;
        }

        for(int i=0;i<vhcmap.size();i++){
            ArrayList<Mapper> coordinates = vhcmap.get(i);
            Mapper m1 = coordinates.get(0);
            Mapper m2 = coordinates.get(1);
            Mapper m3 = coordinates.get(2);
            Mapper m4 = coordinates.get(3);
            if(m1.loc.latitude > m.loc.latitude && Math.abs(m1.loc.longitude) > Math.abs(m.loc.longitude) ) {
                if(m3.loc.latitude < m.loc.latitude && Math.abs(m3.loc.longitude) < Math.abs(m.loc.longitude) ) {
                    result = i+sign*random.nextInt(windowSize);
                }
            }
        }
        if(result>=vhcmap.size()) {
            ArrayList<Mapper> coordinates = vhcmap.get(vhcmap.size());
            Mapper m1 = coordinates.get(0);
            Mapper m2 = coordinates.get(1);
            Mapper m3 = coordinates.get(2);
            Mapper m4 = coordinates.get(3);
            double lat = m1.loc.latitude - (Math.abs(m1.loc.latitude) - Math.abs(m3.loc.latitude))/2;
            double lng = m1.loc.longitude + (Math.abs(m1.loc.longitude) - Math.abs(m3.loc.longitude))/2;
            return new LatLng(lat,lng);
        }
        if(result<=0) {
            ArrayList<Mapper> coordinates = vhcmap.get(0);
            Mapper m1 = coordinates.get(0);
            Mapper m2 = coordinates.get(1);
            Mapper m3 = coordinates.get(2);
            Mapper m4 = coordinates.get(3);
            double lat = m1.loc.latitude - (Math.abs(m1.loc.latitude) - Math.abs(m3.loc.latitude))/2;
            double lng = m1.loc.longitude + (Math.abs(m1.loc.longitude) - Math.abs(m3.loc.longitude))/2;
            return new LatLng(lat,lng);
        }
        else{
            ArrayList<Mapper> coordinates = vhcmap.get(result);
            Mapper m1 = coordinates.get(0);
            Mapper m2 = coordinates.get(1);
            Mapper m3 = coordinates.get(2);
            Mapper m4 = coordinates.get(3);
            double lat = m1.loc.latitude - (Math.abs(m1.loc.latitude) - Math.abs(m3.loc.latitude))/2;
            double lng = m1.loc.longitude + (Math.abs(m1.loc.longitude) - Math.abs(m3.loc.longitude))/2;
            return new LatLng(lat,lng);
        }
    }


 
}
